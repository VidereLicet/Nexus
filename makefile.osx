# -*- mode: Makefile; -*-
# Copyright (c) 2009-2010 Satoshi Nakamoto
# Copyright (c) 2011-2012 The PPCoin developers
# Distributed under the MIT/X11 software license, see the accompanying
# file license.txt or http://www.opensource.org/licenses/mit-license.php.

# Mac OS X makefile for Nexus
# Originally by Laszlo Hanyecz (solar@heliacal.net)

CXX=llvm-g++
DEPSDIR=/opt/local

INCLUDEPATHS= \
 -I"$(CURDIR)/src" \
 -I"$(CURDIR)/src/core" \
 -I"$(CURDIR)/src/hash" \
 -I"$(CURDIR)/src/json" \
 -I"$(CURDIR)/src/LLP" \
 -I"$(CURDIR)/src/LLD" \
 -I"$(CURDIR)/src/net" \
 -I"$(CURDIR)/src/util" \
 -I"$(CURDIR)/src/wallet" \
 -I"$(DEPSDIR)/include" \
 -I"$(DEPSDIR)/include/db48"

LIBPATHS= \
 -L"$(DEPSDIR)/lib" \
 -L"$(DEPSDIR)/lib/db48"

USE_LLD=1

USE_UPNP:=1

LIBS= -dead_strip

TESTDEFS = -DTEST_DATA_DIR=$(abspath test/data)

ifdef STATIC
# Build STATIC if you are redistributing the bitcoind binary
TESTLIBS += \
 $(DEPSDIR)/lib/libboost_unit_test_framework-mt.a
LIBS += \
 $(DEPSDIR)/lib/db48/libdb_cxx-4.8.a \
 $(DEPSDIR)/lib/libboost_system-mt.a \
 $(DEPSDIR)/lib/libboost_filesystem-mt.a \
 $(DEPSDIR)/lib/libboost_program_options-mt.a \
 $(DEPSDIR)/lib/libboost_thread-mt.a \
 $(DEPSDIR)/lib/libssl.a \
 $(DEPSDIR)/lib/libcrypto.a \
 -lz
else
TESTLIBS += \
 -lboost_unit_test_framework-mt
LIBS += \
 -ldb_cxx-4.8 \
 -lboost_system-mt \
 -lboost_filesystem-mt \
 -lboost_program_options-mt \
 -lboost_thread-mt \
 -lssl \
 -lcrypto \
 -lz
TESTDEFS += -DBOOST_TEST_DYN_LINK
endif

DEFS=-DMAC_OSX -DMSG_NOSIGNAL=0 -DBOOST_SPIRIT_THREADSAFE

ifdef RELEASE
CFLAGS = -mmacosx-version-min=10.10 -O3
# Compile for maximum compatibility and smallest size.
# This requires that dependencies are compiled
# the same way.
ifdef 64BIT
CFLAGS += -arch x86_64
else
CFLAGS += -arch i386
endif
else
CFLAGS = -g
endif

CFLAGS += $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)
HEADERS = $(wildcard *.h)
OBJS= \
    build/version.o \
    build/netbase.o \
    build/addrman.o \
    build/crypter.o \
    build/key.o \
    build/db.o \
    build/main.o \
    build/keystore.o \
    build/difficulty.o \
    build/checkpoints.o \
    build/net.o \
    build/protocol.o \
    build/unifiedtime.o \
    build/rpcserver.o \
    build/rpcdump.o \
    build/script.o \
    build/util.o \
    build/wallet.o \
    build/walletdb.o \
    build/index.o \
    build/keychain.o \
    build/noui.o \
    build/kernel.o \
    build/debug.o \
    build/prime.o \
    build/skein.o \
    build/skein_block.o \
    build/KeccakDuplex.o \
    build/KeccakSponge.o \
    build/Keccak-compact64.o \
    build/KeccakHash.o \
    build/release.o \
    build/block.o \
    build/dispatch.o \
    build/message.o \
    build/mining.o \
    build/transaction.o \
    build/global.o

ifdef USE_UPNP
	DEFS += -DUSE_UPNP=$(USE_UPNP)
ifdef STATIC
	LIBS += $(DEPSDIR)/lib/libminiupnpc.a
else
	LIBS += -lminiupnpc
endif
endif

#add build support for the LLD vs Berklee DB
ifdef USE_LLD
	DEFS += -DUSE_LLD
endif

all: nexus

# auto-generated dependencies:
-include build/*.P

build/%.o: src/%.cpp $(HEADERS)
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

build/%.o: src/core/%.cpp $(HEADERS)
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

build/%.o: src/hash/%.c $(HEADERS)
	$(CXX) -c $(CFLAGS) -x c -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

build/%.o: src/hash/%.cpp $(HEADERS)
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

build/%.o: src/json/%.cpp $(HEADERS)
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)
	  
build/%.o: src/LLD/%.cpp $(HEADERS)
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

build/%.o: src/LLP/%.cpp $(HEADERS)
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

build/%.o: src/net/%.cpp $(HEADERS)
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

build/%.o: src/util/%.cpp $(HEADERS)
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

build/%.o: src/wallet/%.cpp $(HEADERS)
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

nexus: $(OBJS:build/%=build/%)
	$(CXX) $(CFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS)

clean:
	-rm -f nexus
	-rm -f build/*.o
	-rm -f obj-test/*.o
	-rm -f obj/*.P
	-rm -f obj-test/*.P
	-rm -f src/build.h

FORCE:
